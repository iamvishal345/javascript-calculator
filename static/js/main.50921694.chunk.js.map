{"version":3,"sources":["static/numbers.js","components/custom-button.jsx","App.js","components/display.jsx","serviceWorker.js","index.js"],"names":["NUMBERS","nine","eight","seven","six","five","four","three","two","one","zero","decimal","OPERATIONS","add","subtract","multiply","divide","CustomButton","num","id","handleClick","className","onClick","value","App","useState","input","setInput","lastIsOpr","setLastIsOpr","handleNumPadClick","e","target","console","log","lastIndexOf","handleOprPadClick","opr","temp","charAt","length","isNaN","slice","calculateSum","eval","Fragment","Object","keys","map","key","Display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50921694.chunk.js","sourcesContent":["export const NUMBERS = {\r\n  nine: 9,\r\n  eight: 8,\r\n  seven: 7,\r\n  six: 6,\r\n  five: 5,\r\n  four: 4,\r\n  three: 3,\r\n  two: 2,\r\n  one: 1,\r\n  zero: 0,\r\n  decimal: \".\",\r\n};\r\n\r\nexport const OPERATIONS = {\r\n  add: \"+\",\r\n  subtract: \"-\",\r\n  multiply: \"*\",\r\n  divide: \"/\",\r\n};\r\n","import React from \"react\";\r\n\r\nconst CustomButton = ({ num, id, handleClick }) => (\r\n  <button className=\"custom-button\" id={id} onClick={handleClick} value={num}>\r\n    {num}\r\n  </button>\r\n);\r\nexport default CustomButton;\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Display from \"./components/display\";\nimport CustomButton from \"./components/custom-button\";\nimport { NUMBERS, OPERATIONS } from \"./static/numbers\";\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [lastIsOpr, setLastIsOpr] = useState(false);\n  const handleNumPadClick = (e) => {\n    let num = e.target.value;\n    console.log(num, input);\n    // if()\n    if ((input === \"0\" || input === \"\" || input === 0) && num !== \".\") {\n    } else {\n      console.log(\n        input.lastIndexOf(\".\"),\n        input.lastIndexOf(\"-\"),\n        input.lastIndexOf(\"+\")\n      );\n      if (\n        ((input.lastIndexOf(\"+\") !== -1 &&\n          input.lastIndexOf(\".\") > input.lastIndexOf(\"+\")) ||\n          (input.lastIndexOf(\"-\") !== -1 &&\n            input.lastIndexOf(\".\") > input.lastIndexOf(\"-\")) ||\n          (input.lastIndexOf(\"*\") !== -1 &&\n            input.lastIndexOf(\".\") > input.lastIndexOf(\"*\")) ||\n          (input.lastIndexOf(\"/\") !== -1 &&\n            input.lastIndexOf(\".\") > input.lastIndexOf(\"/\"))) &&\n        num === \".\"\n      ) {\n        num = input;\n      } else if (\n        input.lastIndexOf(\"+\") === -1 &&\n        input.lastIndexOf(\"-\") === -1 &&\n        input.lastIndexOf(\"*\") === -1 &&\n        input.lastIndexOf(\"/\") === -1 &&\n        input.lastIndexOf(\".\") !== -1 &&\n        num === \".\"\n      ) {\n        num = input;\n      } else {\n        num = input + num;\n      }\n    }\n    setInput(num);\n    setLastIsOpr(false);\n  };\n  const handleOprPadClick = (e) => {\n    let opr = e.target.value;\n    let temp = input;\n    console.log(opr, \"value\");\n    if (lastIsOpr) {\n      if (opr === \"+\" || opr === \"-\") {\n        if (\n          temp.charAt(temp.length - 1) === \"+\" ||\n          temp.charAt(temp.length - 1) === \"-\"\n        ) {\n          if (isNaN(temp.charAt(temp.length - 2))) {\n            temp = temp.slice(0, -2);\n          } else {\n            temp = temp.slice(0, -1);\n          }\n        }\n      } else {\n        temp = temp.slice(0, -1);\n      }\n    }\n    if (input === \"\") {\n      if (opr === \"+\" || opr === \"-\") {\n        setInput(temp + opr);\n      }\n    } else {\n      setInput(temp + opr);\n    }\n    setLastIsOpr(true);\n  };\n  const calculateSum = (e) => {\n    // eslint-disable-next-line no-eval\n    let num = eval(input);\n    console.log(num);\n    setInput(`${num}`);\n  };\n  return (\n    <div className=\"container\">\n      <header>\n        <div className=\"title\">Calculator</div>\n      </header>\n      <div className=\"calculator\">\n        <Display value={input} />\n        <div className=\"clear-backspace-container\">\n          <button\n            className=\"clr-bks-btn\"\n            id=\"clear\"\n            onClick={() => setInput(\"0\")}\n          >\n            AC\n          </button>\n          <button className=\"clr-bks-btn\" id=\"backspace\">\n            CE\n          </button>\n          <button\n            className=\"clr-bks-btn\"\n            id=\"backspace\"\n            onClick={() => setInput(input.slice(0, -1))}\n          >\n            C\n          </button>\n          <button className=\"clr-bks-btn last\" id=\"backspace\">\n            <sup>+</sup>&#8260;<sub>&#8722;</sub>\n          </button>\n        </div>\n        <div className=\"pad-box\">\n          <div className=\"num-pad\">\n            <React.Fragment>\n              {Object.keys(NUMBERS).map((id) => {\n                return (\n                  <CustomButton\n                    key={NUMBERS[id]}\n                    id={id}\n                    num={NUMBERS[id]}\n                    handleClick={handleNumPadClick}\n                  />\n                );\n              })}\n              <CustomButton\n                key={\"=\"}\n                id={\"equals\"}\n                num={\"=\"}\n                handleClick={calculateSum}\n              />\n            </React.Fragment>\n          </div>\n\n          <div className=\"operation-pad\">\n            {Object.keys(OPERATIONS).map((id) => {\n              return (\n                <CustomButton\n                  key={OPERATIONS[id]}\n                  id={id}\n                  handleClick={handleOprPadClick}\n                  num={OPERATIONS[id]}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nconst Display = ({ value }) => (\r\n  <div id=\"display\" className=\"display\">\r\n    <label>{value}</label>\r\n  </div>\r\n);\r\n\r\nexport default Display;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}